*** PATCH ***
*** 1,33 ****
  #pragma once
  
- // Salto indireto antigo:
- // #define JMP( pointer ) { __asm { __asm MOV EAX, pointer __asm JMP EAX } }
- 
  // Atalhos de instrução
  #define NAKED                    __declspec(naked)
  #define STDCALL                  __stdcall
  #define THISCALL                 __thiscall
  #define FASTCALL                 __fastcall
  #define FORCEINLINE              __forceinline
  #define ALIGNED(x)               __declspec(align(x))
  #define NOINLINE                 __declspec(noinline)
  #define DLLEXPORT                __declspec(dllexport)
  #define DLLIMPORT                __declspec(dllimport)
  
+ // ---------------------------------------------------------------------------
+ // Saltos compatíveis com MSVC inline asm
+ // ---------------------------------------------------------------------------
+ //  - JMP_IMM(addr): addr é um imediato/constante (ex.: 0x0043CB20)
+ //  - JMP_VAR(sym) : sym é uma VARIÁVEL DWORD que guarda o endereço alvo
+ //
+ // Obs: Evite usar membros estáticos C++ diretamente no asm (nome decorado).
+ //      Prefira um símbolo C global (alias) e use JMP_VAR(alias).
+ // ---------------------------------------------------------------------------
+ 
+ // Salto para IMEDIATO (constante)
+ #define JMP_IMM(addr)            { __asm { mov eax, addr            } __asm { jmp eax } }
+ 
+ // Salto para VARIÁVEL (carrega DWORD contido em [sym] e salta)
+ #define JMP_VAR(sym)             { __asm { mov eax, dword ptr [sym] } __asm { jmp eax } }
*** END PATCH ***
